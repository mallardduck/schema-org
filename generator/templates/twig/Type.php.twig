<?php

namespace Spatie\SchemaOrg;

use \Spatie\SchemaOrg\Contracts\{{ type.name }}Contract;
{% for parent in type.parents %}
use \Spatie\SchemaOrg\Contracts\{{ parent }}Contract;
{% endfor %}

/**
 * {{ type.description | doc(0) }}
 *
 * @see {{ type.resource }}
 *
{% for property in type.properties if property.pending  %}
 * @method static {{ property.name }}(${{ property.name }}) The value should be instance of pending types {{ property.ranges | join('|') }}
{% endfor %}
{% if type.source is not empty %}
 *
 * External Sources:
{% for source in type.source  %}
 * @see {{ source }}
{% endfor %}
{% endif %}
 */
class {{ type.name }} extends BaseType implements {{ type.name }}Contract{% if type.parents %}, {% endif %}{{ type.parents|map(parent => "#{parent}Contract")|join(', ') }}
{
{% for constant in type.constants %}
    /**
     * {{ constant.description | doc(1) }}
     *
     * @see {{ constant.value }}
{% if constant.source is not empty %}
     *
     * External Sources:
{% for source in constant.source  %}
     * @see {{ source }}
{% endfor %}
{% endif %}
     */
     const {{ constant.name }} = '{{ constant.value }}';

{% endfor %}
{% for property in type.properties if not property.pending  %}
    /**
     * {{ property.description | doc(1) }}
     *
     * @param {{ property.ranges | param }} ${{ property.name }}
     *
     * @return static
     *
     * @see {{ property.resource }}
     */
    public function {{ property.name }}(${{ property.name }})
    {
        return $this->setProperty('{{ property.name }}', ${{ property.name }});
    }

{% endfor %}
}
